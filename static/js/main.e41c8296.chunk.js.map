{"version":3,"sources":["api/index.js","panels/Home.js","panels/VueFriends.js","App.js","index.js"],"names":["Users","opts","connect","send","method","params","Object","objectSpread","v","Friends","Home","_ref","id","go","fetchedUser","access_token","react_default","a","createElement","vkui","console","log","title","before","photo_200","src","description","city","concat","first_name","last_name","size","level","onClick","data-to","VueFriends","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","usersInfo","isSpinner","countFriendsInstagram","_this2","offsetFriendsInterval","friendsInterval","setInterval","count","offset","fields","then","res","data","response","items","length","setState","_state$usersInfo","push","apply","toConsumableArray","forceUpdate","clearInterval","catch","e","window","open","getFriends","_this3","left","prev","bind","osname","IOS","chevron_back_default","back_default","style","margin","map","friend","index","key","instagram","status","bottomContent","goInstagram","React","Component","App","activePanel","currentTarget","dataset","to","subscribe","detail","type","getUser","app_id","scope","panels_Home","panels_VueFriends","error","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.e41c8296.chunk.js","sourcesContent":["import fetchJsonp from 'fetch-jsonp';\r\nimport connect from '@vkontakte/vkui-connect-promise';\r\n\r\nconst getProfilesUrl = (method, opt) => {\r\n    let urlOpts = '';\r\n    let optKeys = Object.keys(opt);\r\n    optKeys.forEach(item => urlOpts += `${item}=${opt[item]}&`);\r\n    return `https://api.vk.com/method/${method}?${urlOpts}v=5.80`\r\n};\r\n\r\nconst API = (method, opt) => {\r\n    return fetchJsonp(getProfilesUrl(method, opt))\r\n      .then(res => res.json())\r\n      .catch(error => console.error(error));\r\n};\r\nconst Account = {\r\n    getInfo (opts) {\r\n        const method = 'account.getInfo';\r\n        return API(method, opts);\r\n    }\r\n};\r\n\r\nconst Users = {\r\n    getUsers (opts) {\r\n        const method = 'users.get';\r\n        // return API(method, opts);\r\n        return connect.send('VKWebAppCallAPIMethod', {method, params: {...opts, v: '5.95'}});\r\n    },\r\n    getFollowers (opts) {\r\n        const method = 'users.getFollowers';\r\n        return API(method, opts);\r\n    }\r\n};\r\n\r\nconst Friends = {\r\n    getFriends (opts) {\r\n        const method = 'friends.get';\r\n        // return API(method, opts);\r\n        return connect.send('VKWebAppCallAPIMethod', {method, params: {...opts, v: '5.95'}});\r\n    },\r\n    getRequests (opts) {\r\n        const method = 'friends.getRequests';\r\n        return API(method, opts);\r\n    },\r\n    deleteFriends (opts) {\r\n        const method = 'friends.delete';\r\n        return API(method, opts);\r\n    }\r\n};\r\n\r\nconst Likes = {\r\n    getLikePosts (opts) {\r\n        const method = 'fave.getPosts';\r\n        return API(method, opts);\r\n    },\r\n    getLikePhotos (opts) {\r\n        const method = 'fave.getPhotos';\r\n        return API(method, opts);\r\n    },\r\n    deleteLike (opts) {\r\n        const method = 'likes.delete';\r\n        return API(method, opts);\r\n    }\r\n};\r\n\r\nexport {\r\n    Account,\r\n    Users,\r\n    Friends,\r\n    Likes\r\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Panel, ListItem, Button, Group, Div, Avatar, PanelHeader} from '@vkontakte/vkui';\n\nconst Home = ({id, go, fetchedUser, access_token}) => (\n    <Panel id={id}>\n        {console.log(fetchedUser)}\n        <PanelHeader>VK Tools</PanelHeader>\n        {fetchedUser &&\n        <Group title=\"Ваш аккаунт\">\n            <ListItem\n                before={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n                description={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}\n            >\n                {`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n            </ListItem>\n        </Group>}\n\n        <Group title=\"Панель управления\">\n            <Div>\n                <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"friends\">\n                    Друзья в инстаграме\n                </Button>\n            </Div>\n        </Group>\n    </Panel>\n);\n\nHome.propTypes = {\n    id: PropTypes.string.isRequired,\n    go: PropTypes.func.isRequired,\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    }),\n};\n\nexport default Home;\n","import {\n    Panel,\n    Button,\n    Group,\n    Div,\n    Avatar,\n    PanelHeader,\n    HeaderButton,\n    Cell,\n    IOS,\n    Spinner,\n    Progress\n} from '@vkontakte/vkui';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport {Friends, Users} from '../api';\n\nclass VueFriends extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            usersInfo: [],\n            isSpinner: true,\n            countFriendsInstagram: 0,\n        };\n    }\n\n    getFriends () {\n        let offsetFriendsInterval = 0;\n        this.friendsInterval = setInterval(() => {\n            Friends.getFriends({\n                count: 100,\n                offset: offsetFriendsInterval,\n                fields: 'nickname, domain, sex, bdate, city, country, timezone, photo_200, has_mobile, contacts, education, online, relation, last_seen, status, can_write_private_message, can_see_all_posts, can_post, universities ',\n                access_token: this.props.access_token,\n            })\n                .then(res => {\n                    if(!res.data.response.items.length) {\n                        clearInterval(this.friendsInterval);\n                    } else {\n                        offsetFriendsInterval += 100;\n                        this.setState(state => state.usersInfo.push(...res.data.response.items));\n                        this.forceUpdate();\n                    }\n                    this.setState({isSpinner: false});\n                })\n                .catch(e => console.log('ERR GET Friends', e));\n        }, 2000);\n    }\n\n    goInstagram (id) {\n        return window.open(`https://www.instagram.com/${id}`);\n    }\n\n    prev (e) {\n        clearInterval(this.friendsInterval);\n        this.props.go(e);\n    }\n\n    componentDidMount () {\n        this.getFriends();\n    }\n\n    render () {\n        return (\n            <Panel id={this.props.id}>\n                <PanelHeader\n                    left={<HeaderButton onClick={this.prev.bind(this)} data-to=\"home\">\n                        {this.osname === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n                    </HeaderButton>}\n                >\n                    Друзья\n                </PanelHeader>\n                <Group title={`Друзья в инстаграме ${this.state.usersInfo.length}`}>\n                    {\n                        this.state.isSpinner &&\n                        <Cell size=\"l\">\n                            <Spinner size=\"large\" style={{margin: '150px 0'}}/>\n                        </Cell>\n                    }\n                    {\n                        this.state.usersInfo.map((friend, index) => {\n                            return (\n                                <div key={index}>\n                                    {\n                                        friend.instagram &&\n                                        <Cell\n                                            size=\"l\"\n                                            description={friend.status || ''}\n                                            before={<Avatar src={friend.photo_200}/>}\n                                            bottomContent={\n                                                <Button onClick={\n                                                    this.goInstagram.bind(this, friend.instagram)\n                                                }>Instagram</Button>\n                                            }\n                                        >\n                                            {`${friend.first_name} ${friend.last_name}`}\n                                        </Cell>\n                                    }\n                                </div>\n                            );\n                        })\n                    }\n                </Group>\n            </Panel>\n        );\n    }\n}\n\nVueFriends.propTypes = {\n    go: PropTypes.func.isRequired,\n    access_token: PropTypes.string.isRequired\n};\n\nexport default VueFriends;\n","import React from 'react';\nimport connect from '@vkontakte/vkui-connect';\nimport {View} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport {Users} from './api';\n\nimport Home from './panels/Home';\nimport VueFriends from './panels/VueFriends';\n\nclass App extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            activePanel: 'home',\n            fetchedUser: null,\n            access_token: null\n        };\n    }\n\n    componentDidMount () {\n        connect.subscribe((e) => {\n            switch (e.detail.type) {\n                case 'VKWebAppAccessTokenReceived':\n                    this.setState({ access_token : e.detail.data.access_token });\n                    console.log('access_token', e.detail.data.access_token);\n                    this.getUser();\n                    break;\n                default:\n                    console.log(e.detail);\n            }\n        });\n        connect.send(\"VKWebAppGetAuthToken\", {\"app_id\": 6940370, \"scope\": \"friends,status,wall,groups\"});\n    }\n\n    getUser() {\n        Users.getUsers({\n            fields: 'photo_200,city,title',\n            access_token: this.state.access_token\n        })\n            .then(res => this.setState({ fetchedUser : res.data.response[0]}))\n            .catch(e => console.log('ERR GET User', e));\n    }\n\n    go = (e) => {\n        this.setState({activePanel: e.currentTarget.dataset.to})\n    };\n\n    render () {\n        return (\n            <View activePanel={this.state.activePanel}>\n                <Home id=\"home\" fetchedUser={this.state.fetchedUser} go={this.go} access_token={this.state.access_token}/>\n                <VueFriends\n                    id=\"friends\"\n                    go={this.go}\n                    access_token={this.state.access_token}\n                />\n            </View>\n        );\n    }\n}\n\nexport default App;\n","import 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vkui-connect-promise';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK App\nconnect.send('VKWebAppInit', {})\n    .then(res => console.log('VKWebAppInit', res))\n    .catch(e => console.error('ERR VKWebAppInit', e));\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT \n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}