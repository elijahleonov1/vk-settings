{"version":3,"sources":["api/index.js","panels/Home.js","panels/VueFriendsForInstagram.js","panels/VueFriendsIsDeleted.js","panels/VueFriendsIsList.js","panels/VueFriendsBookmarks.js","panels/VueFriendsLastActivity.js","panels/VueFriendsMutual.js","App.js","index.js"],"names":["Users","opts","connect","send","method","params","Object","objectSpread","v","Friends","Home","_ref","id","go","fetchedUser","access_token","react_default","a","createElement","vkui","console","log","title","onClick","window","open","concat","before","photo_200","src","description","city","first_name","last_name","size","level","data-to","VueFriendsForInstagram","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","usersInfo","isSpinner","getFriends","_this2","offsetFriendsInterval","friendsInterval","setInterval","count","offset","then","res","data","response","items","length","getUsersInfo","forEach","item","instagram","setState","push","forceUpdate","catch","e","clearInterval","ids","strFriendsIds","slice","join","user_ids","fields","domen","stopPropagation","_this3","left","prev","bind","osname","IOS","chevron_back_default","back_default","style","margin","map","friend","index","key","status","photo_200_orig","bottomContent","zIndex","goInstagram","React","Component","VueFriendsIsDeleted","deactivated","VueFriendsIsList","friendsIds","getFriendsIds","friendsIdsInterval","_state$friendsIds","apply","toConsumableArray","getFriendsList","friendsListsInterval","_this4","user_id","return_system","VueFriendsBookmarks","is_favorite","VueFriendsLastActivity","moment","locale","frendsItems","sort","b","last_seen","time","_state$usersInfo","format","friendsMutual","getFriendsMutual","frend","find","common_count","target_uids","App","activePanel","currentTarget","dataset","to","subscribe","detail","type","getUser","app_id","scope","panels_Home","panels_VueFriendsForInstagram","panels_VueFriendsIsDeleted","panels_VueFriendsIsList","panels_VueFriendsBookmarks","panels_VueFriendsLastActivity","VueFriendsMutual","error","ReactDOM","render","src_App","document","getElementById"],"mappings":"qRAwBMA,UAAQ,SACAC,GAEN,OAAOC,IAAQC,KAAK,wBAAyB,CAACC,OAD/B,YACuCC,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKL,EAAN,CAAYO,EAxBlE,aAgCRC,EAAU,SACAR,GAER,OAAOC,IAAQC,KAAK,wBAAyB,CAACC,OAD/B,cACuCC,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKL,EAAN,CAAYO,EAnClE,YAgCRC,EAAU,SAKKR,GAEb,OAAOC,IAAQC,KAAK,wBAAyB,CAACC,OAD/B,mBACuCC,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKL,EAAN,CAAYO,EAvClE,YAgCRC,EAAU,SASMR,GAEd,OAAOC,IAAQC,KAAK,wBAAyB,CAACC,OAD/B,oBACuCC,OAAOC,OAAAC,EAAA,EAAAD,CAAA,GAAKL,EAAN,CAAYO,EA3ClE,YCkECE,EAjEF,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,GAAIC,EAANF,EAAME,GAAIC,EAAVH,EAAUG,YAAVH,EAAuBI,aAAvB,OACTC,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOP,GAAIA,GACNQ,QAAQC,IAAIP,GACbE,EAAAC,EAAAC,cAACC,EAAA,YAAD,iBACCL,GACDE,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOG,MAAM,iEACTN,EAAAC,EAAAC,cAACC,EAAA,SAAD,CACII,QAAS,kBAAMC,OAAOC,KAAP,oBAAAC,OAAgCZ,EAAYF,MAC3De,OAAQb,EAAYc,UAAYZ,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQU,IAAKf,EAAYc,YAAe,KACxEE,YAAahB,EAAYiB,MAAQjB,EAAYiB,KAAKT,MAAQR,EAAYiB,KAAKT,MAAQ,IAHvF,GAAAI,OAKQZ,EAAYkB,WALpB,KAAAN,OAKkCZ,EAAYmB,aAIlDjB,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOG,MAAM,sJACTN,EAAAC,EAAAC,cAACC,EAAA,IAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQe,KAAK,KAAKC,MAAM,IAAIZ,QAASV,EAAIuB,UAAQ,uBAAjD,6GAIJpB,EAAAC,EAAAC,cAACC,EAAA,IAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQe,KAAK,KAAKC,MAAM,IAAIZ,QAASV,EAAIuB,UAAQ,oBAAjD,kHAIJpB,EAAAC,EAAAC,cAACC,EAAA,IAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQe,KAAK,KAAKC,MAAM,IAAIZ,QAASV,EAAIuB,UAAQ,iBAAjD,wEAIJpB,EAAAC,EAAAC,cAACC,EAAA,IAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQe,KAAK,KAAKC,MAAM,IAAIZ,QAASV,EAAIuB,UAAQ,oBAAjD,uGAIJpB,EAAAC,EAAAC,cAACC,EAAA,IAAD,KACIH,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQe,KAAK,KAAKC,MAAM,IAAIZ,QAASV,EAAIuB,UAAQ,uBAAjD,kMCmGDC,cAvHX,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAjC,OAAAkC,EAAA,EAAAlC,CAAAmC,KAAAJ,IAChBE,EAAAjC,OAAAoC,EAAA,EAAApC,CAAAmC,KAAAnC,OAAAqC,EAAA,EAAArC,CAAA+B,GAAAO,KAAAH,KAAMH,KACDO,MAAQ,CACTC,UAAW,GACXC,WAAW,GAJCR,mFAShBE,KAAKO,kDAGK,IAAAC,EAAAR,KAENS,EAAwB,EAE5BT,KAAKU,gBAAkBC,YAAY,WAE/B3C,EAAmB,CACf4C,MAAO,IACPC,OAAQJ,EACRnC,aAAckC,EAAKX,MAAMvB,eAExBwC,KAAK,SAAAC,GAEEA,EAAIC,KAAKC,SAASC,MAAMC,QAGxBV,GAfW,IAiBXD,EAAKY,aAAaL,EAAIC,KAAKC,SAASC,OAC/BJ,KAAK,SAAAC,GACFA,EAAIC,KAAKC,SAASI,QAAQ,SAAAC,GAClBA,EAAKC,WACLf,EAAKgB,SAAS,SAAApB,GAAK,OAAIA,EAAMC,UAAUoB,KAAKH,OAGpDd,EAAKgB,SAAS,CAAClB,WAAW,IAC1BE,EAAKkB,gBAERC,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,gBAAiBgD,MAd7CC,cAAcrB,EAAKE,mBAiB1BiB,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,kBAAmBgD,MAEhD,0CAGOE,GACV,IAAMC,EAAgBD,EAAIE,MAAM,EAAG,KAAKC,KAAK,KAC7C,OAAO1E,EAAe,CAClB2E,SAAUH,EACVI,OAAQ,irBACR7D,aAAc0B,KAAKH,MAAMvB,mDAIrBsD,EAAGQ,GAEX,OADAR,EAAES,kBACKtD,OAAOC,KAAP,6BAAAC,OAAyCmD,iCAG9CR,GACFC,cAAc7B,KAAKU,iBACnBV,KAAKH,MAAMzB,GAAGwD,oCAGR,IAAAU,EAAAtC,KACN,OACIzB,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOP,GAAI6B,KAAKH,MAAM1B,IAClBI,EAAAC,EAAAC,cAACC,EAAA,YAAD,CACI6D,KAAMhE,EAAAC,EAAAC,cAACC,EAAA,aAAD,CAAcI,QAASkB,KAAKwC,KAAKC,KAAKzC,MAAOL,UAAQ,QACtDK,KAAK0C,SAAWC,MAAMpE,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,MAAuBD,EAAAC,EAAAC,cAACoE,EAAArE,EAAD,QAFtD,wCAOAD,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOG,MAAK,4GAAAI,OAAyBe,KAAKI,MAAMC,UAAUc,SAElDnB,KAAKI,MAAME,WACX/B,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMe,KAAK,KACPlB,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASe,KAAK,QAAQqD,MAAO,CAACC,OAAQ,cAI1C/C,KAAKI,MAAMC,WACXL,KAAKI,MAAMC,UAAU2C,IAAI,SAACC,EAAQC,GAC9B,OACI3E,EAAAC,EAAAC,cAAA,OAAK0E,IAAKD,GACN3E,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACIe,KAAK,IACLJ,YAAa4D,EAAOG,QAAU,GAC9BlE,OAAQX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQU,IAAK6D,EAAO9D,WAAa8D,EAAOI,iBAChDvE,QAAS,kBAAMC,OAAOC,KAAP,oBAAAC,OAAgCgE,EAAO9E,MACtDmF,cACI/E,EAAAC,EAAAC,cAAA,OAAKqE,MAAO,CAACS,OAAQ,MACjBhF,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQI,QACJ,SAAC8C,GAAD,OAAOU,EAAKkB,YAAY5B,EAAGqB,EAAO1B,aADtC,eAPZ,GAAAtC,OAaQgE,EAAO1D,WAbf,KAAAN,OAa6BgE,EAAOzD,wBAvGnCiE,IAAMC,WCoG5BC,cApGX,SAAAA,EAAa9D,GAAO,IAAAC,EAAA,OAAAjC,OAAAkC,EAAA,EAAAlC,CAAAmC,KAAA2D,IAChB7D,EAAAjC,OAAAoC,EAAA,EAAApC,CAAAmC,KAAAnC,OAAAqC,EAAA,EAAArC,CAAA8F,GAAAxD,KAAAH,KAAMH,KACDO,MAAQ,CACTC,UAAW,GACXC,WAAW,GAJCR,mFAShBE,KAAKO,kDAGK,IAAAC,EAAAR,KAENS,EAAwB,EAE5BT,KAAKU,gBAAkBC,YAAY,WAE/B3C,EAAmB,CACf4C,MANmB,IAOnBC,OAAQJ,EACR0B,OAAQ,oEACR7D,aAAckC,EAAKX,MAAMvB,eAExBwC,KAAK,SAAAC,GAEEA,EAAIC,KAAKC,SAASC,MAAMC,QAGxBV,GAhBW,IAkBXM,EAAIC,KAAKC,SAASC,MAAMG,QAAQ,SAAAC,GACH,gBAArBA,EAAKsC,aACgB,WAArBtC,EAAKsC,aACLpD,EAAKgB,SAAS,SAAApB,GAAK,OAAIA,EAAMC,UAAUoB,KAAKH,OAGpDd,EAAKgB,SAAS,CAAClB,WAAW,IAC1BE,EAAKkB,eAXLG,cAAcrB,EAAKE,mBAc1BiB,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,kBAAmBgD,MAEhD,kCAGDA,GACFC,cAAc7B,KAAKU,iBACnBV,KAAKH,MAAMzB,GAAGwD,oCAId,OACIrD,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOP,GAAI6B,KAAKH,MAAM1B,IAClBI,EAAAC,EAAAC,cAACC,EAAA,YAAD,CACI6D,KAAMhE,EAAAC,EAAAC,cAACC,EAAA,aAAD,CAAcI,QAASkB,KAAKwC,KAAKC,KAAKzC,MAAOL,UAAQ,QACtDK,KAAK0C,SAAWC,MAAMpE,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,MAAuBD,EAAAC,EAAAC,cAACoE,EAAArE,EAAD,QAFtD,wCAOAD,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOG,MAAK,mIAAAI,OAA4Be,KAAKI,MAAMC,UAAUc,SAErDnB,KAAKI,MAAME,WACX/B,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMe,KAAK,KACPlB,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASe,KAAK,QAAQqD,MAAO,CAACC,OAAQ,cAI1C/C,KAAKI,MAAMC,WACXL,KAAKI,MAAMC,UAAU2C,IAAI,SAACC,EAAQC,GAC9B,OACI3E,EAAAC,EAAAC,cAAA,OAAK0E,IAAKD,GACN3E,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACIe,KAAK,IACLJ,YAAa4D,EAAOG,QAAU,GAC9BlE,OAAQX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQU,IAAK6D,EAAO9D,WAAa8D,EAAOI,iBAChDC,cAC2B,gBAAvBL,EAAOW,YAAgC,uCAChB,WAAvBX,EAAOW,YAA2B,6CAAW,GAEjD9E,QAAS,kBAAMC,OAAOC,KAAP,oBAAAC,OAAgCgE,EAAO9E,OAR1D,GAAAc,OAUQgE,EAAO1D,WAVf,KAAAN,OAU6BgE,EAAOzD,wBApFtCiE,IAAMC,mBC2JzBG,cA1JX,SAAAA,EAAahE,GAAO,IAAAC,EAAA,OAAAjC,OAAAkC,EAAA,EAAAlC,CAAAmC,KAAA6D,IAChB/D,EAAAjC,OAAAoC,EAAA,EAAApC,CAAAmC,KAAAnC,OAAAqC,EAAA,EAAArC,CAAAgG,GAAA1D,KAAAH,KAAMH,KACDO,MAAQ,CACTC,UAAW,GACXC,WAAW,EAEXwD,WAAY,IANAhE,mFAWhBE,KAAK+D,wDAGQ,IAAAvD,EAAAR,KAETS,EAAwB,EAE5BT,KAAKgE,mBAAqBrD,YAAY,WAElC3C,EAAmB,CACf4C,MANmB,IAOnBC,OAAQJ,EACRnC,aAAckC,EAAKX,MAAMvB,eAExBwC,KAAK,SAAAC,GACEA,EAAIC,KAAKC,SAASC,MAAMC,QAIxBV,GAfW,IAgBXD,EAAKgB,SAAS,SAAApB,GAAK,IAAA6D,EAAA,OAAIA,EAAA7D,EAAM0D,YAAWrC,KAAjByC,MAAAD,EAAApG,OAAAsG,EAAA,EAAAtG,CAAyBkD,EAAIC,KAAKC,SAASC,YAJlEW,cAAcrB,EAAKwD,oBACnBxD,EAAK4D,oBAMZzC,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,kBAAmBgD,MAEhD,0CAGO,IAAAU,EAAAtC,KAENS,EAAwB,EAE5BT,KAAKqE,qBAAuB1D,YAAY,WAEpC3C,EAAmB,CACf4C,MANmB,IAOnBC,OAAQJ,EACRnC,aAAcgE,EAAKzC,MAAMvB,eAExBwC,KAAK,SAAAC,GAEEA,EAAIC,KAAKC,SAASC,MAAMC,QAGxBV,GAfW,IAiBXM,EAAIC,KAAKC,SAASC,MAAMG,QAAQ,SAAAlD,OAJhC0D,cAAcS,EAAK+B,wBAW1B1C,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,kBAAmBgD,MAEhD,8CAGW,IAAA0C,EAAAtE,KAIdA,KAAKqE,qBAAuB1D,YAAY,WAEpC3C,EAAwB,CACpBuG,QAASD,EAAKlE,MAAM0D,WAAW,GAC/BU,cAAe,EACflG,aAAcgG,EAAKzE,MAAMvB,eAExBwC,KAAK,SAAAC,GAEEA,EAAIC,KAAKC,SAASC,MAAMC,QAZb,IAiBXJ,EAAIC,KAAKC,SAASC,MAAMG,QAAQ,SAAAlD,OAJhC0D,cAAcyC,EAAKD,wBAW1B1C,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,kBAAmBgD,MAEhD,kCAGDA,GACFC,cAAc7B,KAAKgE,oBACnBnC,cAAc7B,KAAKqE,sBACnBrE,KAAKH,MAAMzB,GAAGwD,oCAId,OACIrD,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOP,GAAI6B,KAAKH,MAAM1B,IAClBI,EAAAC,EAAAC,cAACC,EAAA,YAAD,CACI6D,KAAMhE,EAAAC,EAAAC,cAACC,EAAA,aAAD,CAAcI,QAASkB,KAAKwC,KAAKC,KAAKzC,MAAOL,UAAQ,QACtDK,KAAK0C,SAAWC,MAAMpE,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,MAAuBD,EAAAC,EAAAC,cAACoE,EAAArE,EAAD,QAFtD,wCAOAD,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOG,MAAK,4GAAAI,OAAyBe,KAAKI,MAAMC,UAAUc,SAElDnB,KAAKI,MAAME,WACX/B,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMe,KAAK,KACPlB,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASe,KAAK,QAAQqD,MAAO,CAACC,OAAQ,cAI1C/C,KAAKI,MAAMC,WACXL,KAAKI,MAAMC,UAAU2C,IAAI,SAACC,EAAQC,GAC9B,OACI3E,EAAAC,EAAAC,cAAA,OAAK0E,IAAKD,GACN3E,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACIe,KAAK,IACLJ,YAAa4D,EAAOG,QAAU,GAC9BlE,OAAQX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQU,IAAK6D,EAAO9D,WAAa8D,EAAOI,iBAChDC,cAC2B,gBAAvBL,EAAOW,YAAgC,uCAChB,WAAvBX,EAAOW,YAA2B,6CAAW,GAEjD9E,QAAS,kBAAMC,OAAOC,KAAP,oBAAAC,OAAgCgE,EAAO9E,OAR1D,GAAAc,OAUQgE,EAAO1D,WAVf,KAAAN,OAU6BgE,EAAOzD,wBA1IzCiE,IAAMC,WC8GtBe,cA5GX,SAAAA,EAAa5E,GAAO,IAAAC,EAAA,OAAAjC,OAAAkC,EAAA,EAAAlC,CAAAmC,KAAAyE,IAChB3E,EAAAjC,OAAAoC,EAAA,EAAApC,CAAAmC,KAAAnC,OAAAqC,EAAA,EAAArC,CAAA4G,GAAAtE,KAAAH,KAAMH,KACDO,MAAQ,CACTC,UAAW,GACXC,WAAW,GAJCR,mFAShBE,KAAKO,kDAGK,IAAAC,EAAAR,KAENS,EAAwB,EAE5BT,KAAKU,gBAAkBC,YAAY,WAE/B3C,EAAmB,CACf4C,MAAO,IACPC,OAAQJ,EACRnC,aAAckC,EAAKX,MAAMvB,eAExBwC,KAAK,SAAAC,GAEEA,EAAIC,KAAKC,SAASC,MAAMC,QAGxBV,GAfW,IAiBXD,EAAKY,aAAaL,EAAIC,KAAKC,SAASC,OAC/BJ,KAAK,SAAAC,GACFA,EAAIC,KAAKC,SAASI,QAAQ,SAAAC,GAClBA,EAAKoD,aACLlE,EAAKgB,SAAS,SAAApB,GAAK,OAAIA,EAAMC,UAAUoB,KAAKH,OAGpDd,EAAKgB,SAAS,CAAClB,WAAW,IAC1BE,EAAKkB,gBAERC,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,gBAAiBgD,MAd7CC,cAAcrB,EAAKE,mBAiB1BiB,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,kBAAmBgD,MAEhD,0CAGOE,GACV,IAAMC,EAAgBD,EAAIE,MAAM,EAAG,KAAKC,KAAK,KAC7C,OAAO1E,EAAe,CAClB2E,SAAUH,EACVI,OAAQ,irBACR7D,aAAc0B,KAAKH,MAAMvB,4CAI3BsD,GACFC,cAAc7B,KAAKU,iBACnBV,KAAKH,MAAMzB,GAAGwD,oCAId,OACIrD,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOP,GAAI6B,KAAKH,MAAM1B,IAClBI,EAAAC,EAAAC,cAACC,EAAA,YAAD,CACI6D,KAAMhE,EAAAC,EAAAC,cAACC,EAAA,aAAD,CAAcI,QAASkB,KAAKwC,KAAKC,KAAKzC,MAAOL,UAAQ,QACtDK,KAAK0C,SAAWC,MAAMpE,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,MAAuBD,EAAAC,EAAAC,cAACoE,EAAArE,EAAD,QAFtD,wCAOAD,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOG,MAAK,sGAAAI,OAAwBe,KAAKI,MAAMC,UAAUc,SAEjDnB,KAAKI,MAAME,WACX/B,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMe,KAAK,KACPlB,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASe,KAAK,QAAQqD,MAAO,CAACC,OAAQ,cAI1C/C,KAAKI,MAAMC,WACXL,KAAKI,MAAMC,UAAU2C,IAAI,SAACC,EAAQC,GAC9B,OACI3E,EAAAC,EAAAC,cAAA,OAAK0E,IAAKD,GACN3E,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACIe,KAAK,IACLJ,YAAa4D,EAAOG,QAAU,GAC9BlE,OAAQX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQU,IAAK6D,EAAO9D,WAAa8D,EAAOI,iBAChDvE,QAAS,kBAAMC,OAAOC,KAAP,oBAAAC,OAAgCgE,EAAO9E,OAJ1D,GAAAc,OAOQgE,EAAO1D,WAPf,KAAAN,OAO6BgE,EAAOzD,wBA5FtCiE,IAAMC,6BCsHzBiB,cApHX,SAAAA,EAAa9E,GAAO,IAAAC,EAAA,OAAAjC,OAAAkC,EAAA,EAAAlC,CAAAmC,KAAA2E,GAChB7E,EAAAjC,OAAAoC,EAAA,EAAApC,CAAAmC,KAAAnC,OAAAqC,EAAA,EAAArC,CAAA8G,GAAAxE,KAAAH,KAAMH,IACN+E,MAASC,OAAO,MAChB/E,EAAKM,MAAQ,CACTC,UAAW,GACXC,WAAW,GALCR,mFAUhBE,KAAKO,kDAGK,IAAAC,EAAAR,KAENS,EAAwB,EAE5BT,KAAKU,gBAAkBC,YAAY,WAE/B3C,EAAmB,CACf4C,MANmB,IAOnBuB,OAAQ,yOACRtB,OAAQJ,EACRnC,aAAckC,EAAKX,MAAMvB,eAExBwC,KAAK,SAAAC,GAEF,GAAIA,EAAIC,KAAKC,SAASC,MAAMC,OAErB,CACHV,GAhBW,IAiBX,IAAMqE,EAAc/D,EAAIC,KAAKC,SAASC,MAAM6D,KAAK,SAACvG,EAAGwG,GACjD,OAAKxG,EAAEyG,WAAcD,EAAEC,UAEnBzG,EAAEyG,UAAUC,KAAOF,EAAEC,UAAUC,MACvB,EAER1G,EAAEyG,UAAUC,KAAOF,EAAEC,UAAUC,KACxB,EAEJ,EARmC,IAU9CvG,QAAQC,IAAIkG,GACZtE,EAAKgB,SAAS,SAAApB,GAAS,IAAA+E,GACnBA,EAAA/E,EAAMC,WAAUoB,KAAhByC,MAAAiB,EAAAtH,OAAAsG,EAAA,EAAAtG,CAAwBiH,IACxB1E,EAAME,WAAY,IAEtBE,EAAKkB,mBAnBLG,cAAcrB,EAAKE,mBAsB1BiB,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,kBAAmBgD,MAEhD,yCAGKA,EAAGQ,GAEX,OADAR,EAAES,kBACKtD,OAAOC,KAAP,6BAAAC,OAAyCmD,iCAG9CR,GACFC,cAAc7B,KAAKU,iBACnBV,KAAKH,MAAMzB,GAAGwD,oCAId,OACIrD,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOP,GAAI6B,KAAKH,MAAM1B,IAClBI,EAAAC,EAAAC,cAACC,EAAA,YAAD,CACI6D,KAAMhE,EAAAC,EAAAC,cAACC,EAAA,aAAD,CAAcI,QAASkB,KAAKwC,KAAKC,KAAKzC,MAAOL,UAAQ,QACtDK,KAAK0C,SAAWC,MAAMpE,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,MAAuBD,EAAAC,EAAAC,cAACoE,EAAArE,EAAD,QAFtD,wCAOAD,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOG,MAAK,4JAAAI,OAAiCe,KAAKI,MAAMC,UAAUc,SAE1DnB,KAAKI,MAAME,WACX/B,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMe,KAAK,KACPlB,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASe,KAAK,QAAQqD,MAAO,CAACC,OAAQ,cAI1C/C,KAAKI,MAAMC,WACXL,KAAKI,MAAMC,UAAU2C,IAAI,SAACC,EAAQC,GAC9B,OACI3E,EAAAC,EAAAC,cAAA,OAAK0E,IAAKD,GACN3E,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACIe,KAAK,IACLJ,YAAa4D,EAAOG,QAAU,GAC9BlE,OAAQX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQU,IAAK6D,EAAO9D,WAAa8D,EAAOI,iBAChDvE,QAAS,kBAAMC,OAAOC,KAAP,oBAAAC,OAAgCgE,EAAO9E,MAEtDmF,cACIL,EAAOgC,UACHL,IAA6B,IAAtB3B,EAAOgC,UAAUC,MAAWE,OAAO,wBAAwB,gEAR9E,GAAAnG,OAYQgE,EAAO1D,WAZf,KAAAN,OAY6BgE,EAAOzD,wBApGnCiE,IAAMC,WC+G5B2B,cA/GX,SAAAA,EAAaxF,GAAO,IAAAC,EAAA,OAAAjC,OAAAkC,EAAA,EAAAlC,CAAAmC,KAAAqF,IAChBvF,EAAAjC,OAAAoC,EAAA,EAAApC,CAAAmC,KAAAnC,OAAAqC,EAAA,EAAArC,CAAAwH,GAAAlF,KAAAH,KAAMH,KACDO,MAAQ,CACTC,UAAW,GACXC,WAAW,GAJCR,mFAShBE,KAAKO,kDAGK,IAAAC,EAAAR,KAENS,EAAwB,EAE5BT,KAAKU,gBAAkBC,YAAY,WAE/B3C,EAAmB,CACf4C,MANmB,IAOnBC,OAAQJ,EACRnC,aAAckC,EAAKX,MAAMvB,eAExBwC,KAAK,SAAAC,GAEEA,EAAIC,KAAKC,SAASC,MAAMC,QAGxBV,GAfW,IAiBXD,EAAK8E,iBAAiBvE,EAAIC,KAAKC,SAASC,OACnCJ,KAAK,SAAAC,GACFpC,QAAQC,IAAImC,GAEZP,EAAKJ,MAAMC,UAAUgB,QAAQ,SAACkE,GAC1BxE,EAAIC,KAAKC,SAASI,QAAQ,SAACC,GACvBd,EAAKgB,SAAS,SAACpB,GACCA,EAAMC,UAAUmF,KAAK,SAAAD,GAAK,OAAIA,EAAMpH,KAAOmD,EAAKnD,KACtDsH,aAAenE,EAAKmE,mBAKtCjF,EAAKgB,SAAS,CAAClB,WAAW,IAC1BE,EAAKkB,gBAERC,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,gBAAiBgD,MApB7CC,cAAcrB,EAAKE,mBAuB1BiB,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,kBAAmBgD,MAEhD,8CAGWE,GACQA,EAAIE,MAAM,EAAG,KAAKC,KAAK,KAC7C,OAAOjE,EAAyB,CAC5B0H,YAAa5D,EACbxD,aAAc0B,KAAKH,MAAMvB,4CAI3BsD,GACFC,cAAc7B,KAAKU,iBACnBV,KAAKH,MAAMzB,GAAGwD,oCAId,OACIrD,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOP,GAAI6B,KAAKH,MAAM1B,IAClBI,EAAAC,EAAAC,cAACC,EAAA,YAAD,CACI6D,KAAMhE,EAAAC,EAAAC,cAACC,EAAA,aAAD,CAAcI,QAASkB,KAAKwC,KAAKC,KAAKzC,MAAOL,UAAQ,QACtDK,KAAK0C,SAAWC,MAAMpE,EAAAC,EAAAC,cAACmE,EAAApE,EAAD,MAAuBD,EAAAC,EAAAC,cAACoE,EAAArE,EAAD,QAFtD,wCAOAD,EAAAC,EAAAC,cAACC,EAAA,MAAD,CAAOG,MAAK,4GAAAI,OAAyBe,KAAKI,MAAMC,UAAUc,SAElDnB,KAAKI,MAAME,WACX/B,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMe,KAAK,KACPlB,EAAAC,EAAAC,cAACC,EAAA,QAAD,CAASe,KAAK,QAAQqD,MAAO,CAACC,OAAQ,cAI1C/C,KAAKI,MAAMC,WACXL,KAAKI,MAAMC,UAAU2C,IAAI,SAACC,EAAQC,GAC9B,OACI3E,EAAAC,EAAAC,cAAA,OAAK0E,IAAKD,GACN3E,EAAAC,EAAAC,cAACC,EAAA,KAAD,CACIe,KAAK,IACLJ,YAAW,qIAAAJ,OAA8BgE,EAAOwC,cAAgB,KAChEvG,OAAQX,EAAAC,EAAAC,cAACC,EAAA,OAAD,CAAQU,IAAK6D,EAAO9D,WAAa8D,EAAOI,kBAHpD,GAAApE,OAKQgE,EAAO1D,WALf,KAAAN,OAK6BgE,EAAOzD,wBA/F5CiE,IAAMC,WCyEnBiC,cA7EX,SAAAA,EAAa9F,GAAO,IAAAC,EAAA,OAAAjC,OAAAkC,EAAA,EAAAlC,CAAAmC,KAAA2F,IAChB7F,EAAAjC,OAAAoC,EAAA,EAAApC,CAAAmC,KAAAnC,OAAAqC,EAAA,EAAArC,CAAA8H,GAAAxF,KAAAH,KAAMH,KAiCVzB,GAAK,SAACwD,GACF9B,EAAK0B,SAAS,CAACoE,YAAahE,EAAEiE,cAAcC,QAAQC,MAhCpDjG,EAAKM,MAAQ,CACTwF,YAAa,OACbvH,YAAa,KACbC,aAAc,MANFwB,mFAUC,IAAAU,EAAAR,KACjBvC,IAAQuI,UAAU,SAACpE,GACf,OAAQA,EAAEqE,OAAOC,MACb,IAAK,8BACD1F,EAAKgB,SAAS,CAAElD,aAAesD,EAAEqE,OAAOjF,KAAK1C,eAC7CK,QAAQC,IAAI,eAAgBgD,EAAEqE,OAAOjF,KAAK1C,cAC1CkC,EAAK2F,UACL,MACJ,QACIxH,QAAQC,IAAIgD,EAAEqE,WAG1BxI,IAAQC,KAAK,uBAAwB,CAAC0I,OAAU,QAASC,MAAS,iEAG5D,IAAA/D,EAAAtC,KACNzC,EAAe,CACX4E,OAAQ,uBACR7D,aAAc0B,KAAKI,MAAM9B,eAExBwC,KAAK,SAAAC,GAAG,OAAIuB,EAAKd,SAAS,CAAEnD,YAAc0C,EAAIC,KAAKC,SAAS,OAC5DU,MAAM,SAAAC,GAAC,OAAIjD,QAAQC,IAAI,eAAgBgD,sCAQ5C,OACIrD,EAAAC,EAAAC,cAACC,EAAA,KAAD,CAAMkH,YAAa5F,KAAKI,MAAMwF,aAC1BrH,EAAAC,EAAAC,cAAC6H,EAAD,CAAMnI,GAAG,OAAOE,YAAa2B,KAAKI,MAAM/B,YAAaD,GAAI4B,KAAK5B,GAAIE,aAAc0B,KAAKI,MAAM9B,eAC3FC,EAAAC,EAAAC,cAAC8H,EAAD,CACIpI,GAAG,sBACHC,GAAI4B,KAAK5B,GACTE,aAAc0B,KAAKI,MAAM9B,eAE7BC,EAAAC,EAAAC,cAAC+H,EAAD,CACIrI,GAAG,mBACHC,GAAI4B,KAAK5B,GACTE,aAAc0B,KAAKI,MAAM9B,eAE7BC,EAAAC,EAAAC,cAACgI,EAAD,CACItI,GAAG,gBACHC,GAAI4B,KAAK5B,GACTE,aAAc0B,KAAKI,MAAM9B,eAE7BC,EAAAC,EAAAC,cAACiI,EAAD,CACIvI,GAAG,mBACHC,GAAI4B,KAAK5B,GACTE,aAAc0B,KAAKI,MAAM9B,eAE7BC,EAAAC,EAAAC,cAACkI,EAAD,CACIxI,GAAG,sBACHC,GAAI4B,KAAK5B,GACTE,aAAc0B,KAAKI,MAAM9B,eAE7BC,EAAAC,EAAAC,cAACmI,EAAD,CACIzI,GAAG,gBACHC,GAAI4B,KAAK5B,GACTE,aAAc0B,KAAKI,MAAM9B,uBAvE3BmF,IAAMC,WCNxBjG,IAAQC,KAAK,eAAgB,IACxBoD,KAAK,SAAAC,GAAG,OAAIpC,QAAQC,IAAI,eAAgBmC,KACxCY,MAAM,SAAAC,GAAC,OAAIjD,QAAQkI,MAAM,mBAAoBjF,KAQlDkF,IAASC,OAAOxI,EAAAC,EAAAC,cAACuI,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.ee2e05df.chunk.js","sourcesContent":["import fetchJsonp from 'fetch-jsonp';\r\nimport connect from '@vkontakte/vkui-connect-promise';\r\n\r\nconst V_API = '5.95';\r\n\r\nconst getProfilesUrl = (method, opt) => {\r\n    let urlOpts = '';\r\n    let optKeys = Object.keys(opt);\r\n    optKeys.forEach(item => urlOpts += `${item}=${opt[item]}&`);\r\n    return `https://api.vk.com/method/${method}?${urlOpts}v=5.80`\r\n};\r\n\r\nconst API = (method, opt) => {\r\n    return fetchJsonp(getProfilesUrl(method, opt))\r\n      .then(res => res.json())\r\n      .catch(error => console.error(error));\r\n};\r\nconst Account = {\r\n    getInfo (opts) {\r\n        const method = 'account.getInfo';\r\n        return API(method, opts);\r\n    }\r\n};\r\n\r\nconst Users = {\r\n    getUsers (opts) {\r\n        const method = 'users.get';\r\n        return connect.send('VKWebAppCallAPIMethod', {method, params: {...opts, v: V_API}});\r\n    },\r\n    getFollowers (opts) {\r\n        const method = 'users.getFollowers';\r\n        return API(method, opts);\r\n    }\r\n};\r\n\r\nconst Friends = {\r\n    getFriends (opts) {\r\n        const method = 'friends.get';\r\n        return connect.send('VKWebAppCallAPIMethod', {method, params: {...opts, v: V_API}});\r\n    },\r\n    getFriendsLists (opts) {\r\n        const method = 'friends.getLists';\r\n        return connect.send('VKWebAppCallAPIMethod', {method, params: {...opts, v: V_API}});\r\n    },\r\n    getFriendsMutual (opts) {\r\n        const method = 'friends.getMutual';\r\n        return connect.send('VKWebAppCallAPIMethod', {method, params: {...opts, v: V_API}});\r\n    },\r\n    getRequests (opts) {\r\n        const method = 'friends.getRequests';\r\n        return API(method, opts);\r\n    },\r\n    deleteFriends (opts) {\r\n        const method = 'friends.delete';\r\n        return API(method, opts);\r\n    }\r\n};\r\n\r\nconst Likes = {\r\n    getLikePosts (opts) {\r\n        const method = 'fave.getPosts';\r\n        return API(method, opts);\r\n    },\r\n    getLikePhotos (opts) {\r\n        const method = 'fave.getPhotos';\r\n        return API(method, opts);\r\n    },\r\n    deleteLike (opts) {\r\n        const method = 'likes.delete';\r\n        return API(method, opts);\r\n    }\r\n};\r\n\r\nconst Utils = {\r\n    getDateRegistration(id) {\r\n        const url = `https://vk.com/foaf.php?id=${id}`;\r\n        return fetchJsonp(url)\r\n            .then(res => res.json())\r\n            .catch(error => console.error(error));\r\n    }\r\n};\r\n\r\nexport {\r\n    Account,\r\n    Users,\r\n    Friends,\r\n    Likes,\r\n    Utils\r\n};","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {Panel, ListItem, Button, Group, Div, Avatar, PanelHeader} from '@vkontakte/vkui';\n\nconst Home = ({id, go, fetchedUser, access_token}) => (\n    <Panel id={id}>\n        {console.log(fetchedUser)}\n        <PanelHeader>VK Tools</PanelHeader>\n        {fetchedUser &&\n        <Group title=\"Ваш аккаунт\">\n            <ListItem\n                onClick={() => window.open(`https://vk.com/id${fetchedUser.id}`)}\n                before={fetchedUser.photo_200 ? <Avatar src={fetchedUser.photo_200}/> : null}\n                description={fetchedUser.city && fetchedUser.city.title ? fetchedUser.city.title : ''}\n            >\n                {`${fetchedUser.first_name} ${fetchedUser.last_name}`}\n            </ListItem>\n        </Group>}\n\n        <Group title=\"Панель управления друзьями\">\n            <Div>\n                <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"friendsForInstagram\">\n                    Друзья в инстаграме\n                </Button>\n            </Div>\n            <Div>\n                <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"friendsIsDeleted\">\n                    Удаленные/Забаненые\n                </Button>\n            </Div>\n            <Div>\n                <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"friendsMutual\">\n                    Общие друзья\n                </Button>\n            </Div>\n            <Div>\n                <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"friendsBookmarks\">\n                    Друзья в закладках\n                </Button>\n            </Div>\n            <Div>\n                <Button size=\"xl\" level=\"2\" onClick={go} data-to=\"friendsLastActivity\">\n                    Последняя активность друзей\n                </Button>\n            </Div>\n        </Group>\n        {/*<Group title=\"Установить слежку\">*/}\n            {/*<Div>*/}\n                {/*<Button size=\"xl\" level=\"2\" onClick={go} data-to=\"snooping\">*/}\n                    {/*Следить*/}\n                {/*</Button>*/}\n            {/*</Div>*/}\n        {/*</Group>*/}\n    </Panel>\n);\n\nHome.propTypes = {\n    id: PropTypes.string.isRequired,\n    go: PropTypes.func.isRequired,\n    fetchedUser: PropTypes.shape({\n        photo_200: PropTypes.string,\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        city: PropTypes.shape({\n            title: PropTypes.string,\n        }),\n    }),\n};\n\nexport default Home;\n","import {\n    Panel,\n    Button,\n    Group,\n    Avatar,\n    PanelHeader,\n    HeaderButton,\n    Cell,\n    IOS,\n    Spinner\n} from '@vkontakte/vkui';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport {Friends, Users} from '../api';\n\nclass VueFriendsForInstagram extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            usersInfo: [],\n            isSpinner: true\n        };\n    }\n\n    componentDidMount () {\n        this.getFriends();\n    }\n\n    getFriends () {\n        let countFriendsInterval = 100;\n        let offsetFriendsInterval = 0;\n\n        this.friendsInterval = setInterval(() => {\n\n            Friends.getFriends({\n                count: 100,\n                offset: offsetFriendsInterval,\n                access_token: this.props.access_token,\n            })\n                .then(res => {\n\n                    if(!res.data.response.items.length) {\n                        clearInterval(this.friendsInterval);\n                    } else {\n                        offsetFriendsInterval += countFriendsInterval;\n\n                        this.getUsersInfo(res.data.response.items)\n                            .then(res => {\n                                res.data.response.forEach(item => {\n                                    if (item.instagram) {\n                                        this.setState(state => state.usersInfo.push(item));\n                                    }\n                                });\n                                this.setState({isSpinner: false});\n                                this.forceUpdate();\n                            })\n                            .catch(e => console.log('ERR GET Users', e));\n                    }\n                })\n                .catch(e => console.log('ERR GET Friends', e));\n\n        }, 2000);\n    }\n\n    getUsersInfo (ids) {\n        const strFriendsIds = ids.slice(0, 100).join(',');\n        return Users.getUsers({\n            user_ids: strFriendsIds,\n            fields: 'photo_id, verified, sex, bdate, city, country, home_town, has_photo, photo_50, photo_100, photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, online, domain, has_mobile, contacts, site, education, universities, schools, status, last_seen, followers_count, common_count, occupation, nickname, relatives, relation, personal, connections, exports, activities, interests, music, movies, tv, books, games, about, quotes, can_post, can_see_all_posts, can_see_audio, can_write_private_message, can_send_friend_request, is_favorite, is_hidden_from_feed, timezone, screen_name, maiden_name, crop_photo, is_friend, friend_status, career, military, blacklisted, blacklisted_by_me',\n            access_token: this.props.access_token\n        });\n    }\n\n    goInstagram(e, domen) {\n        e.stopPropagation();\n        return window.open(`https://www.instagram.com/${domen}`);\n    }\n\n    prev (e) {\n        clearInterval(this.friendsInterval);\n        this.props.go(e);\n    }\n\n    render () {\n        return (\n            <Panel id={this.props.id}>\n                <PanelHeader\n                    left={<HeaderButton onClick={this.prev.bind(this)} data-to=\"home\">\n                        {this.osname === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n                    </HeaderButton>}\n                >\n                    Друзья\n                </PanelHeader>\n                <Group title={`Друзья в инстаграме ${this.state.usersInfo.length}`}>\n                    {\n                        this.state.isSpinner &&\n                        <Cell size=\"l\">\n                            <Spinner size=\"large\" style={{margin: '150px 0'}}/>\n                        </Cell>\n                    }\n                    {\n                        this.state.usersInfo &&\n                        this.state.usersInfo.map((friend, index) => {\n                            return (\n                                <div key={index}>\n                                    <Cell\n                                        size=\"l\"\n                                        description={friend.status || ''}\n                                        before={<Avatar src={friend.photo_200 || friend.photo_200_orig}/>}\n                                        onClick={() => window.open(`https://vk.com/id${friend.id}`)}\n                                        bottomContent={\n                                            <div style={{zIndex: 999}}>\n                                                <Button onClick={\n                                                    (e) => this.goInstagram(e, friend.instagram)\n                                                }>Instagram</Button>\n                                            </div>\n                                        }\n                                    >\n                                        {`${friend.first_name} ${friend.last_name}`}\n                                    </Cell>\n                                </div>\n                            );\n                        })\n                    }\n                </Group>\n            </Panel>\n        );\n    }\n}\n\nVueFriendsForInstagram.propTypes = {\n    go: PropTypes.func.isRequired,\n    access_token: PropTypes.string.isRequired\n};\n\nexport default VueFriendsForInstagram;\n","import {\n    Panel,\n    Group,\n    Avatar,\n    PanelHeader,\n    HeaderButton,\n    Cell,\n    IOS,\n    Spinner\n} from '@vkontakte/vkui';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport {Friends} from '../api';\n\nclass VueFriendsIsDeleted extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            usersInfo: [],\n            isSpinner: true\n        };\n    }\n\n    componentDidMount () {\n        this.getFriends();\n    }\n\n    getFriends () {\n        let countFriendsInterval = 5000;\n        let offsetFriendsInterval = 0;\n\n        this.friendsInterval = setInterval(() => {\n\n            Friends.getFriends({\n                count: countFriendsInterval,\n                offset: offsetFriendsInterval,\n                fields: 'bdate, city, country, photo_200_orig, contacts, online, last_seen',\n                access_token: this.props.access_token,\n            })\n                .then(res => {\n\n                    if(!res.data.response.items.length) {\n                        clearInterval(this.friendsInterval);\n                    } else {\n                        offsetFriendsInterval += countFriendsInterval;\n\n                        res.data.response.items.forEach(item => {\n                            if (item.deactivated === 'deactivated' ||\n                                item.deactivated === 'banned') {\n                                this.setState(state => state.usersInfo.push(item));\n                            }\n                        });\n                        this.setState({isSpinner: false});\n                        this.forceUpdate();\n                    }\n                })\n                .catch(e => console.log('ERR GET Friends', e));\n\n        }, 2000);\n    }\n\n    prev (e) {\n        clearInterval(this.friendsInterval);\n        this.props.go(e);\n    }\n\n    render () {\n        return (\n            <Panel id={this.props.id}>\n                <PanelHeader\n                    left={<HeaderButton onClick={this.prev.bind(this)} data-to=\"home\">\n                        {this.osname === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n                    </HeaderButton>}\n                >\n                    Друзья\n                </PanelHeader>\n                <Group title={`Заблокированные друзья ${this.state.usersInfo.length}`}>\n                    {\n                        this.state.isSpinner &&\n                        <Cell size=\"l\">\n                            <Spinner size=\"large\" style={{margin: '150px 0'}}/>\n                        </Cell>\n                    }\n                    {\n                        this.state.usersInfo &&\n                        this.state.usersInfo.map((friend, index) => {\n                            return (\n                                <div key={index}>\n                                    <Cell\n                                        size=\"l\"\n                                        description={friend.status || ''}\n                                        before={<Avatar src={friend.photo_200 || friend.photo_200_orig}/>}\n                                        bottomContent={\n                                            friend.deactivated === 'deactivated' ? 'Удален' :\n                                            friend.deactivated === 'banned' ? 'Забанен': ''\n                                        }\n                                        onClick={() => window.open(`https://vk.com/id${friend.id}`)}\n                                    >\n                                        {`${friend.first_name} ${friend.last_name}`}\n                                    </Cell>\n                                </div>\n                            );\n                        })\n                    }\n                </Group>\n            </Panel>\n        );\n    }\n}\n\nVueFriendsIsDeleted.propTypes = {\n    go: PropTypes.func.isRequired,\n    access_token: PropTypes.string.isRequired\n};\n\nexport default VueFriendsIsDeleted;\n","import {\n    Panel,\n    Group,\n    Avatar,\n    PanelHeader,\n    HeaderButton,\n    Cell,\n    IOS,\n    Spinner\n} from '@vkontakte/vkui';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport {Friends} from '../api';\n\nclass VueFriendsIsList extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            usersInfo: [],\n            isSpinner: true,\n\n            friendsIds: []\n        };\n    }\n\n    componentDidMount () {\n        this.getFriendsIds();\n    }\n\n    getFriendsIds () {\n        let countFriendsInterval = 5000;\n        let offsetFriendsInterval = 0;\n\n        this.friendsIdsInterval = setInterval(() => {\n\n            Friends.getFriends({\n                count: countFriendsInterval,\n                offset: offsetFriendsInterval,\n                access_token: this.props.access_token,\n            })\n                .then(res => {\n                    if(!res.data.response.items.length) {\n                        clearInterval(this.friendsIdsInterval);\n                        this.getFriendsList();\n                    } else {\n                        offsetFriendsInterval += countFriendsInterval;\n                        this.setState(state => state.friendsIds.push(...res.data.response.items));\n                    }\n                })\n                .catch(e => console.log('ERR GET Friends', e));\n\n        }, 2000);\n    }\n\n    getFriends () {\n        let countFriendsInterval = 5000;\n        let offsetFriendsInterval = 0;\n\n        this.friendsListsInterval = setInterval(() => {\n\n            Friends.getFriends({\n                count: countFriendsInterval,\n                offset: offsetFriendsInterval,\n                access_token: this.props.access_token,\n            })\n                .then(res => {\n\n                    if(!res.data.response.items.length) {\n                        clearInterval(this.friendsListsInterval);\n                    } else {\n                        offsetFriendsInterval += countFriendsInterval;\n\n                        res.data.response.items.forEach(id => {\n\n                        });\n                        // this.setState({isSpinner: false});\n                        // this.forceUpdate();\n                    }\n                })\n                .catch(e => console.log('ERR GET Friends', e));\n\n        }, 2000);\n    }\n\n    getFriendsList () {\n        let countFriendsInterval = 5000;\n        let offsetFriendsInterval = 0;\n\n        this.friendsListsInterval = setInterval(() => {\n\n            Friends.getFriendsLists({\n                user_id: this.state.friendsIds[0],\n                return_system: 0,\n                access_token: this.props.access_token,\n            })\n                .then(res => {\n\n                    if(!res.data.response.items.length) {\n                        clearInterval(this.friendsListsInterval);\n                    } else {\n                        offsetFriendsInterval += countFriendsInterval;\n\n                        res.data.response.items.forEach(id => {\n\n                        });\n                        // this.setState({isSpinner: false});\n                        // this.forceUpdate();\n                    }\n                })\n                .catch(e => console.log('ERR GET Friends', e));\n\n        }, 2000);\n    }\n\n    prev (e) {\n        clearInterval(this.friendsIdsInterval);\n        clearInterval(this.friendsListsInterval);\n        this.props.go(e);\n    }\n\n    render () {\n        return (\n            <Panel id={this.props.id}>\n                <PanelHeader\n                    left={<HeaderButton onClick={this.prev.bind(this)} data-to=\"home\">\n                        {this.osname === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n                    </HeaderButton>}\n                >\n                    Друзья\n                </PanelHeader>\n                <Group title={`Друзья в инстаграме ${this.state.usersInfo.length}`}>\n                    {\n                        this.state.isSpinner &&\n                        <Cell size=\"l\">\n                            <Spinner size=\"large\" style={{margin: '150px 0'}}/>\n                        </Cell>\n                    }\n                    {\n                        this.state.usersInfo &&\n                        this.state.usersInfo.map((friend, index) => {\n                            return (\n                                <div key={index}>\n                                    <Cell\n                                        size=\"l\"\n                                        description={friend.status || ''}\n                                        before={<Avatar src={friend.photo_200 || friend.photo_200_orig}/>}\n                                        bottomContent={\n                                            friend.deactivated === 'deactivated' ? 'Удален' :\n                                            friend.deactivated === 'banned' ? 'Забанен': ''\n                                        }\n                                        onClick={() => window.open(`https://vk.com/id${friend.id}`)}\n                                    >\n                                        {`${friend.first_name} ${friend.last_name}`}\n                                    </Cell>\n                                </div>\n                            );\n                        })\n                    }\n                </Group>\n            </Panel>\n        );\n    }\n}\n\nVueFriendsIsList.propTypes = {\n    go: PropTypes.func.isRequired,\n    access_token: PropTypes.string.isRequired\n};\n\nexport default VueFriendsIsList;\n","import {\n    Panel,\n    Button,\n    Group,\n    Avatar,\n    PanelHeader,\n    HeaderButton,\n    Cell,\n    IOS,\n    Spinner\n} from '@vkontakte/vkui';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport React from 'react';\n\nimport PropTypes from 'prop-types';\n\nimport {Friends, Users} from '../api';\n\nclass VueFriendsBookmarks extends React.Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            usersInfo: [],\n            isSpinner: true\n        };\n    }\n\n    componentDidMount () {\n        this.getFriends();\n    }\n\n    getFriends () {\n        let countFriendsInterval = 100;\n        let offsetFriendsInterval = 0;\n\n        this.friendsInterval = setInterval(() => {\n\n            Friends.getFriends({\n                count: 100,\n                offset: offsetFriendsInterval,\n                access_token: this.props.access_token,\n            })\n                .then(res => {\n\n                    if(!res.data.response.items.length) {\n                        clearInterval(this.friendsInterval);\n                    } else {\n                        offsetFriendsInterval += countFriendsInterval;\n\n                        this.getUsersInfo(res.data.response.items)\n                            .then(res => {\n                                res.data.response.forEach(item => {\n                                    if (item.is_favorite) {\n                                        this.setState(state => state.usersInfo.push(item));\n                                    }\n                                });\n                                this.setState({isSpinner: false});\n                                this.forceUpdate();\n                            })\n                            .catch(e => console.log('ERR GET Users', e));\n                    }\n                })\n                .catch(e => console.log('ERR GET Friends', e));\n\n        }, 2000);\n    }\n\n    getUsersInfo (ids) {\n        const strFriendsIds = ids.slice(0, 100).join(',');\n        return Users.getUsers({\n            user_ids: strFriendsIds,\n            fields: 'photo_id, verified, sex, bdate, city, country, home_town, has_photo, photo_50, photo_100, photo_200_orig, photo_200, photo_400_orig, photo_max, photo_max_orig, online, domain, has_mobile, contacts, site, education, universities, schools, status, last_seen, followers_count, common_count, occupation, nickname, relatives, relation, personal, connections, exports, activities, interests, music, movies, tv, books, games, about, quotes, can_post, can_see_all_posts, can_see_audio, can_write_private_message, can_send_friend_request, is_favorite, is_hidden_from_feed, timezone, screen_name, maiden_name, crop_photo, is_friend, friend_status, career, military, blacklisted, blacklisted_by_me',\n            access_token: this.props.access_token\n        });\n    }\n\n    prev (e) {\n        clearInterval(this.friendsInterval);\n        this.props.go(e);\n    }\n\n    render () {\n        return (\n            <Panel id={this.props.id}>\n                <PanelHeader\n                    left={<HeaderButton onClick={this.prev.bind(this)} data-to=\"home\">\n                        {this.osname === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n                    </HeaderButton>}\n                >\n                    Друзья\n                </PanelHeader>\n                <Group title={`Друзья в закладках ${this.state.usersInfo.length}`}>\n                    {\n                        this.state.isSpinner &&\n                        <Cell size=\"l\">\n                            <Spinner size=\"large\" style={{margin: '150px 0'}}/>\n                        </Cell>\n                    }\n                    {\n                        this.state.usersInfo &&\n                        this.state.usersInfo.map((friend, index) => {\n                            return (\n                                <div key={index}>\n                                    <Cell\n                                        size=\"l\"\n                                        description={friend.status || ''}\n                                        before={<Avatar src={friend.photo_200 || friend.photo_200_orig}/>}\n                                        onClick={() => window.open(`https://vk.com/id${friend.id}`)}\n                                    >\n\n                                        {`${friend.first_name} ${friend.last_name}`}\n                                    </Cell>\n                                </div>\n                            );\n                        })\n                    }\n                </Group>\n            </Panel>\n        );\n    }\n}\n\nVueFriendsBookmarks.propTypes = {\n    go: PropTypes.func.isRequired,\n    access_token: PropTypes.string.isRequired\n};\n\nexport default VueFriendsBookmarks;\n","import {\n    Panel,\n    Button,\n    Group,\n    Avatar,\n    PanelHeader,\n    HeaderButton,\n    Cell,\n    IOS,\n    Spinner\n} from '@vkontakte/vkui';\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\n\nimport React from 'react';\nimport moment from 'moment';\n\nimport PropTypes from 'prop-types';\n\nimport {Friends} from '../api';\n\nclass VueFriendsLastActivity extends React.Component {\n    constructor (props) {\n        super(props);\n        moment().locale('ru');\n        this.state = {\n            usersInfo: [],\n            isSpinner: true\n        };\n    }\n\n    componentDidMount () {\n        this.getFriends();\n    }\n\n    getFriends () {\n        let countFriendsInterval = 100;\n        let offsetFriendsInterval = 0;\n\n        this.friendsInterval = setInterval(() => {\n\n            Friends.getFriends({\n                count: countFriendsInterval,\n                fields: 'nickname, domain, sex, bdate, city, country, timezone, photo_50, photo_100, photo_200_orig, has_mobile, contacts, education, online, relation, last_seen, status, can_write_private_message, can_see_all_posts, can_post, universities',\n                offset: offsetFriendsInterval,\n                access_token: this.props.access_token,\n            })\n                .then(res => {\n\n                    if(!res.data.response.items.length) {\n                        clearInterval(this.friendsInterval);\n                    } else {\n                        offsetFriendsInterval += countFriendsInterval;\n                        const frendsItems = res.data.response.items.sort((a, b) => {\n                            if (!a.last_seen || !b.last_seen ) return 0;\n\n                            if (a.last_seen.time < b.last_seen.time) {\n                                return -1;\n                            }\n                            if (a.last_seen.time > b.last_seen.time) {\n                                return 1;\n                            }\n                            return 0;\n                        });\n                        console.log(frendsItems);\n                        this.setState(state => {\n                            state.usersInfo.push(...frendsItems);\n                            state.isSpinner = false;\n                        });\n                        this.forceUpdate();\n                    }\n                })\n                .catch(e => console.log('ERR GET Friends', e));\n\n        }, 2000);\n    }\n\n    goInstagram(e, domen) {\n        e.stopPropagation();\n        return window.open(`https://www.instagram.com/${domen}`);\n    }\n\n    prev (e) {\n        clearInterval(this.friendsInterval);\n        this.props.go(e);\n    }\n\n    render () {\n        return (\n            <Panel id={this.props.id}>\n                <PanelHeader\n                    left={<HeaderButton onClick={this.prev.bind(this)} data-to=\"home\">\n                        {this.osname === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n                    </HeaderButton>}\n                >\n                    Друзья\n                </PanelHeader>\n                <Group title={`Последняя активность друзей ${this.state.usersInfo.length}`}>\n                    {\n                        this.state.isSpinner &&\n                        <Cell size=\"l\">\n                            <Spinner size=\"large\" style={{margin: '150px 0'}}/>\n                        </Cell>\n                    }\n                    {\n                        this.state.usersInfo &&\n                        this.state.usersInfo.map((friend, index) => {\n                            return (\n                                <div key={index}>\n                                    <Cell\n                                        size=\"l\"\n                                        description={friend.status || ''}\n                                        before={<Avatar src={friend.photo_200 || friend.photo_200_orig}/>}\n                                        onClick={() => window.open(`https://vk.com/id${friend.id}`)}\n\n                                        bottomContent={\n                                            friend.last_seen ?\n                                                moment(friend.last_seen.time*1000).format('DD MMM YYYY HH:mm:ss'):'неизвестно'\n                                        }\n                                    >\n\n                                        {`${friend.first_name} ${friend.last_name}`}\n                                    </Cell>\n                                </div>\n                            );\n                        })\n                    }\n                </Group>\n            </Panel>\n        );\n    }\n}\n\nVueFriendsLastActivity.propTypes = {\n    go: PropTypes.func.isRequired,\n    access_token: PropTypes.string.isRequired\n};\n\nexport default VueFriendsLastActivity;\n","import {\r\n    Panel,\r\n    Button,\r\n    Group,\r\n    Avatar,\r\n    PanelHeader,\r\n    HeaderButton,\r\n    Cell,\r\n    IOS,\r\n    Spinner\r\n} from '@vkontakte/vkui';\r\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back';\r\nimport Icon24Back from '@vkontakte/icons/dist/24/back';\r\n\r\nimport React from 'react';\r\n\r\nimport PropTypes from 'prop-types';\r\n\r\nimport {Friends, Users} from '../api';\r\n\r\nclass friendsMutual extends React.Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            usersInfo: [],\r\n            isSpinner: true\r\n        };\r\n    }\r\n\r\n    componentDidMount () {\r\n        this.getFriends();\r\n    }\r\n\r\n    getFriends () {\r\n        let countFriendsInterval = 100;\r\n        let offsetFriendsInterval = 0;\r\n\r\n        this.friendsInterval = setInterval(() => {\r\n\r\n            Friends.getFriends({\r\n                count: countFriendsInterval,\r\n                offset: offsetFriendsInterval,\r\n                access_token: this.props.access_token,\r\n            })\r\n                .then(res => {\r\n\r\n                    if(!res.data.response.items.length) {\r\n                        clearInterval(this.friendsInterval);\r\n                    } else {\r\n                        offsetFriendsInterval += countFriendsInterval;\r\n\r\n                        this.getFriendsMutual(res.data.response.items)\r\n                            .then(res => {\r\n                                console.log(res);\r\n                                debugger;\r\n                                this.state.usersInfo.forEach((frend) => {\r\n                                    res.data.response.forEach((item) => {\r\n                                        this.setState((state) => {\r\n                                            let frend = state.usersInfo.find(frend => frend.id === item.id);\r\n                                            frend.common_count = item.common_count;\r\n                                        });\r\n                                    });\r\n                                });\r\n\r\n                                this.setState({isSpinner: false});\r\n                                this.forceUpdate();\r\n                            })\r\n                            .catch(e => console.log('ERR GET Users', e));\r\n                        }\r\n                })\r\n                .catch(e => console.log('ERR GET Friends', e));\r\n\r\n        }, 2000);\r\n    }\r\n\r\n    getFriendsMutual (ids) {\r\n        const strFriendsIds = ids.slice(0, 100).join(',');\r\n        return Friends.getFriendsMutual({\r\n            target_uids: ids,\r\n            access_token: this.props.access_token\r\n        });\r\n    }\r\n\r\n    prev (e) {\r\n        clearInterval(this.friendsInterval);\r\n        this.props.go(e);\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <Panel id={this.props.id}>\r\n                <PanelHeader\r\n                    left={<HeaderButton onClick={this.prev.bind(this)} data-to=\"home\">\r\n                        {this.osname === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\r\n                    </HeaderButton>}\r\n                >\r\n                    Друзья\r\n                </PanelHeader>\r\n                <Group title={`Друзья в инстаграме ${this.state.usersInfo.length}`}>\r\n                    {\r\n                        this.state.isSpinner &&\r\n                        <Cell size=\"l\">\r\n                            <Spinner size=\"large\" style={{margin: '150px 0'}}/>\r\n                        </Cell>\r\n                    }\r\n                    {\r\n                        this.state.usersInfo &&\r\n                        this.state.usersInfo.map((friend, index) => {\r\n                            return (\r\n                                <div key={index}>\r\n                                    <Cell\r\n                                        size=\"l\"\r\n                                        description={`Количество общих друзей: ${friend.common_count || '0'}`}\r\n                                        before={<Avatar src={friend.photo_200 || friend.photo_200_orig}/>}\r\n                                    >\r\n                                        {`${friend.first_name} ${friend.last_name}`}\r\n                                    </Cell>\r\n                                </div>\r\n                            );\r\n                        })\r\n                    }\r\n                </Group>\r\n            </Panel>\r\n        );\r\n    }\r\n}\r\n\r\nfriendsMutual.propTypes = {\r\n    go: PropTypes.func.isRequired,\r\n    access_token: PropTypes.string.isRequired\r\n};\r\n\r\nexport default friendsMutual;\r\n","import React from 'react';\nimport connect from '@vkontakte/vkui-connect';\nimport {View} from '@vkontakte/vkui';\nimport '@vkontakte/vkui/dist/vkui.css';\n\nimport {Users} from './api';\n\nimport Home from './panels/Home';\nimport VueFriendsForInstagram from './panels/VueFriendsForInstagram';\nimport VueFriendsIsDeleted from './panels/VueFriendsIsDeleted';\nimport VueFriendsIsList from './panels/VueFriendsIsList';\nimport VueFriendsBookmarks from './panels/VueFriendsBookmarks';\nimport VueFriendsLastActivity from './panels/VueFriendsLastActivity';\nimport VueFriendsMutual from './panels/VueFriendsMutual';\n\nclass App extends React.Component {\n    constructor (props) {\n        super(props);\n\n        this.state = {\n            activePanel: 'home',\n            fetchedUser: null,\n            access_token: null\n        };\n    }\n\n    componentDidMount () {\n        connect.subscribe((e) => {\n            switch (e.detail.type) {\n                case 'VKWebAppAccessTokenReceived':\n                    this.setState({ access_token : e.detail.data.access_token });\n                    console.log('access_token', e.detail.data.access_token);\n                    this.getUser();\n                    break;\n                default:\n                    console.log(e.detail);\n            }\n        });\n        connect.send(\"VKWebAppGetAuthToken\", {\"app_id\": 6940370, \"scope\": \"friends,status,wall,groups\"});\n    }\n\n    getUser() {\n        Users.getUsers({\n            fields: 'photo_200,city,title',\n            access_token: this.state.access_token\n        })\n            .then(res => this.setState({ fetchedUser : res.data.response[0]}))\n            .catch(e => console.log('ERR GET User', e));\n    }\n\n    go = (e) => {\n        this.setState({activePanel: e.currentTarget.dataset.to})\n    };\n\n    render () {\n        return (\n            <View activePanel={this.state.activePanel}>\n                <Home id=\"home\" fetchedUser={this.state.fetchedUser} go={this.go} access_token={this.state.access_token}/>\n                <VueFriendsForInstagram\n                    id=\"friendsForInstagram\"\n                    go={this.go}\n                    access_token={this.state.access_token}\n                />\n                <VueFriendsIsDeleted\n                    id=\"friendsIsDeleted\"\n                    go={this.go}\n                    access_token={this.state.access_token}\n                />\n                <VueFriendsIsList\n                    id=\"friendsIsList\"\n                    go={this.go}\n                    access_token={this.state.access_token}\n                />\n                <VueFriendsBookmarks\n                    id=\"friendsBookmarks\"\n                    go={this.go}\n                    access_token={this.state.access_token}\n                />\n                <VueFriendsLastActivity\n                    id=\"friendsLastActivity\"\n                    go={this.go}\n                    access_token={this.state.access_token}\n                />\n                <VueFriendsMutual\n                    id=\"friendsMutual\"\n                    go={this.go}\n                    access_token={this.state.access_token}\n                />\n            </View>\n        );\n    }\n}\n\nexport default App;\n","import 'core-js/es6/map';\nimport 'core-js/es6/set';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport connect from '@vkontakte/vkui-connect-promise';\nimport App from './App';\n// import registerServiceWorker from './sw';\n\n// Init VK App\nconnect.send('VKWebAppInit', {})\n    .then(res => console.log('VKWebAppInit', res))\n    .catch(e => console.error('ERR VKWebAppInit', e));\n\n// Если вы хотите, чтобы ваше веб-приложение работало в оффлайне и загружалось быстрее,\n// расскомментируйте строку с registerServiceWorker();\n// Но не забывайте, что на данный момент у технологии есть достаточно подводных камней\n// Подробнее про сервис воркеры можно почитать тут — https://vk.cc/8MHpmT \n// registerServiceWorker();\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}